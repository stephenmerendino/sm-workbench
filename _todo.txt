----------------------------------------------------------------------------------
Current Tasks
----------------------------------------------------------------------------------
New Features
    [x] Implement mouse movement functionality in input system
    [x] Use convention of <system/struct>_<function> eg. renderer_init, camera_update, mesh_add_vertex, vertex_init
    [x] get shader debugging working in render doc with shader debug info working too
    [x] Generate mip maps for viking room diffuse texture
    [x] Shader hot reload
    [x] Debug labels for vulkan submits
    [x] Debug names for vulkan objects
    [x] Post processs pass w/ compute shader
    [x] Create some type of drawable mesh struct that can work for viking room, gizmo, and basic primitives
    [] Object selection in scene w/ gizmo control
        [] a gizmo control renders at the location of the selected object
            [x] render pass
            [x] frame buffer
            [x] shaders
            [x] pipeline & pipeline layout
            [x] mesh_instance_render_data buffer
            [x] render in gizmo pass
            [] gizmo looks correct for each mode
                [] fix transformation from local space to world space for cylinder
                [] meshes need normal vectors
        [] gizmo respond to user clicking and dragging for translation, rotation, and scale
        [] objects render out an object id to a full screen buffer
        [] when user clicks on the screen we run a compute shader to return the object id of the pixel clicked on
            [] if the user clicked on a valid object id, then we "select" that object in the scene
        [] selected object has a outline effect drawn around it
    [] Debug draw system

Improvements
    [x] Use a ctor/dtor debug label object to auto start/stop debug labels on scope
    [x] Refactor existing render_frame code to make it easier to annotate with debug information
    [x] adding shapes to mesh allows specification of vertex color
    [] Primitive shapes have normals
    [] Use VK_KHR_dynamic_rendering extension to get rid of render pass and framebuffer objects
    [] Add a small world axis in bottom right to know what orientation my camera is in
    [] Use inline way of initializing structs in renderer
    [] Use alloca to allocate on stack for stack arena
        [] Do a pass on the renderer to see if there are places we can just use a stack arena instead of the startup arena
    [] In post process pass, g_main_draw_result doesn't need to be a storage image (RWTexture2D)
        [] Can I have it bound as both a storage image and a sampled image?
    [] Improve how ui system communicates to rest of engine / game
    [] Maximized window support
    [] Borderless fullscreen support
    [] Dedicated fullscreen support
    [] Copy over needed runtime asset data to the run folder and make the run folder the working directory
    [] Can we use hardware srgb texture format to get rid of manual gamma correction?
    [] Move game module to a dll and load it from engine with hooks for engine to call
    [] Refactor upload_buffer_data
        -Right now its setting up a staging buffer and command buffer inside, once we have a better staging buffer strategy we should change this
    [] Move the expansion of shader filename to full path out of the win32 specific code to somewhere agnostic

Bugs
    [] Resizing the window leaves a small black gap around the edge of the rendered frame

----------------------------------------------------------------------------------
Topics to learn about:
----------------------------------------------------------------------------------

Vulkan
    -Push constants
    -Bindless rendering
    -What is a fragment density map?
    -What is sample shading in multisample state create info?

Rendering
    -Restir
    -DDGI

Concurrency
    -Lockless programming
    -Atomics
    -Mutexes
    -Events

Misc
    -Radix sort

----------------------------------------------------------------------------------
Roadmap
----------------------------------------------------------------------------------
[x] Basic renderer working with viking mesh
[x] ImGui working
[x] Shader hot reload
[x] Post processs pass w/ compute shader
[] Object selection in scene w/ gizmo control
[] Debug draw system
[] Infinite ground plane
[] Scene saving & loading
[] Can add basic primitives to scene
[] Basic lighting
[] Can add lights to the scene
...
...
...
[] Depth Only pre pass
[] IBL/Prefiltered Environment lighting
[] Deferred renderer
[] TAA
[] Ray tracing
[] GI
    [] Surfels
    [] REStir
[] Sky/Clouds
[] Decals
[] Water
[] AO
[] Multithreaded command buffer generation
[] Bindless rendering
[] Meshlets
[] DLSS/FSR

[] Post Processing
	[] Bloom
	[] Exposure
	[] White Balancing
	[] Contrast
	[] Brightness
	[] Color Filtering
	[] Saturation
	[] Gamma Correction
